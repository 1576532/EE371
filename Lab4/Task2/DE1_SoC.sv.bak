module DE1_SoC (CLOCK_50, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, KEY, LEDR, SW, GPIO_0);
	input logic 			CLOCK_50; // 50MHz clock.
	output logic 	[6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5;
	output logic 	[9:0] LEDR;
	input logic 	[3:0] KEY; // True when not pressed, False when pressed
	input logic 	[9:0] SW; 
	output logic [5:0] GPIO_0;
	
	logic reset, Entry, Exit, A, B;
	assign reset = SW[9]; 
	assign GPIO_0[0] = B; 
	assign GPIO_0[4] = A;
	
	button b1 (.clk(CLOCK_50), .reset, .inputButton(KEY[1]), .out(A));
	button b2 (.clk(CLOCK_50), .reset, .inputButton(KEY[0]), .out(B));
		
	parking p(.clk(CLOCK_50), .reset, .A, .B, .Entry, .Exit);
	counter c(.clk(CLOCK_50), .reset, .incr(Entry), .decr(Exit), .HEX0, .HEX1, .HEX2, .HEX3, .HEX4, .HEX5);
	
endmodule

module DE1_SoC_testbench();
	logic  clk;
	logic [9:0] SW;
   logic [9:0] LEDR;
	logic [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5;
	logic [3:0] KEY;
	logic [5:0] GPIO_0;
	
   DE1_SoC dut (.CLOCK_50(clk), .HEX0, .HEX1, .HEX2, .HEX3, .HEX4, .HEX5, .KEY, .LEDR, .SW, .GPIO_0);

	// Set up the clock. 
	parameter CLOCK_PERIOD=100; 
	initial begin
		clk <= 0;
		forever #(CLOCK_PERIOD/2) clk <= ~clk;
	end

	// Set up the inputs to the design. Each line is a clock cycle.
	initial begin	
									      	@(posedge clk);
												@(posedge clk);
		SW[9]  <= 1; 					 	@(posedge clk);
		SW[9]  <= 0; 					 	@(posedge clk);
		SW[8:0] <= 0;KEY[1] <= 1;   	@(posedge clk);
												@(posedge clk);
						KEY[0] <= 1;  		@(posedge clk);
												@(posedge clk);
						KEY[1] <= 0;		@(posedge clk); 
												@(posedge clk);
						KEY[0] <= 0;  		@(posedge clk);
												@(posedge clk); // signal entry
												
						KEY[1] <= 1;   	@(posedge clk);
												@(posedge clk);
						KEY[0] <= 1;  		@(posedge clk);
												@(posedge clk);
						KEY[1] <= 0;		@(posedge clk); 
												@(posedge clk);
						KEY[0] <= 0;  		@(posedge clk);
												@(posedge clk); // signal entry
												
						KEY[0] <= 1;		@(posedge clk); 
												@(posedge clk);
						KEY[1] <= 1;  		@(posedge clk);
												@(posedge clk);
						KEY[0] <= 0;		@(posedge clk); 
												@(posedge clk);
						KEY[1] <= 0;  		@(posedge clk);
												@(posedge clk); // signal exit
//						KEY[0] <= 0;		@(posedge clk); 
//												@(posedge clk);	
//						KEY[0] <= 1;  		@(posedge clk);
//												@(posedge clk);
//						KEY[0] <= 0;		@(posedge clk); // move led to the left by 1
//												@(posedge clk);	
//						KEY[0] <= 1;  		@(posedge clk);
//												@(posedge clk);
//						KEY[0] <= 0;		@(posedge clk);  
//												@(posedge clk); 
//						KEY[0] <= 1;		@(posedge clk); 
//												@(posedge clk); 
//						KEY[0] <= 0;		@(posedge clk);
//			SW[9]  <= 1;		  			@(posedge clk);
//			SW[9]  <= 0;					@(posedge clk);
//						KEY[0] <= 0;		@(posedge clk); 
//												@(posedge clk);
//						KEY[0] <= 1;		@(posedge clk);
//												@(posedge clk);
//		
		
		$stop;
   end
endmodule

